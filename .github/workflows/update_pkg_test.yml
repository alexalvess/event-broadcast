name: Update package version - test

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: "Choose version type"
        required: true
        default: "patch"
        options:
          - patch
          - minor
          - major
          - beta

jobs:
  update_pkg_version:
    name: Update Version
    runs-on: ubuntu-latest
    # output:
    #   is_beta: ${{ steps.check_version.outputs.is_beta }}
    #   version: ${{ steps.extract_version.outputs.version }}
    #   previousVersion: ${{ steps.extract_previous_version.outputs.previousVersion }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Configure Git credentials
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Extract package version
      id: extract_version
      run: |
        version=$(node -e "console.log(require('./package.json').version)")
        echo "version=${version}" >> $GITHUB_ENV

    - name: Chech if is beta version
      id: check_version
      run: |
        if [[ "${{ env.version }}" == *"beta"* ]]; then
          echo "is_beta=true" >> $GITHUB_ENV
        else
          echo "is_beta=false" >> $GITHUB_ENV
        fi
    
    - name: Save Current Version
      run: node -e "const fs = require('fs'); let pkg = JSON.parse(fs.readFileSync('./package.json')); pkg['previousVersion'] = '${{ env.version }}'; fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

    - name: Extract package pervious version
      id: extract_previous_version
      run: |
            previousVersion=$(node -e 'console.log(require("./package.json").previousVersion)')
            echo "previousVersion=${previousVersion}" >> $GITHUB_ENV

    - name: Patch Version Package
      run: |
        if [[ "${{ github.event.inputs.version-type }}" == "patch" ]]; then
          npm version patch --no-git-tag-version
        elif [[ "${[ github.event.inputs.version-type }}" == "minor" ]]; then
          npm version minor --no-git-tag-version
        elif [[ "${{ github.event.inputs.version-type }}" == "major" ]]; then
          npm version major --no-git-tag-version
        else
          echo "Invalid version choice: ${{ github.event.inputs.version-type }}"
          exit 1
        fi

    - name: Commit changes
      run: |
        git add .
        git commit -m "update version package"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
