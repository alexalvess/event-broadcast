name: Update package version - Template

on:
  workflow_call:
    inputs:
      command-type:
        required: true
        type: string

jobs:
  update_pkg_version:
    name: Update Version
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Configure Git credentials
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"

    - name: Extract package version
      id: extract_version
      run: |
        version=$(node -e "console.log(require('./package.json').version)")
        echo "version=${version}" >> $GITHUB_ENV
    
    - name: Chech if is beta version
      id: check_version
      run: |
        if [[ "${{ env.version }}" == *"beta"* ]]; then
          echo "is_beta=true" >> $GITHUB_ENV
        else
          echo "is_beta=false" >> $GITHUB_ENV
        fi

    - name: Extract package pervious version
      id: extract_previous_version
      run: |
        previousVersion=$(node -e 'console.log(require("./package.json").previousVersions.slice(-1)[0])')
        echo "previousVersion=${previousVersion}" >> $GITHUB_ENV

    - name: Patch Version Package
      run: |
        if [[ "${{ inputs.command-type }}" == "patch" ]]; then
          npm version patch --no-git-tag-version
        elif [[ "${{ inputs.command-type }}" == "minor" ]]; then
          npm version minor --no-git-tag-version
        elif [[ "${{ inputs.command-type }}" == "major" ]]; then
          npm version major --no-git-tag-version
        elif [[ "${{ inputs.command-type }}" == "beta" ]]; then
          if [ "${{ env.is_beta }}" == "true" ]; then
            npm version prerelease --preid=beta --no-git-tag-version
          else
            npm version prepatch --preid=beta --no-git-tag-version
          fi
        elif [[ "${{ inputs.command-type }}" == "downgrade" ]]; then
          if [[ -n "${{ env.previousVersion }}" ]]; then
            npm version ${{ env.previousVersion }}
          else
            echo "Error: previousVersion is empty. Cannot perform downgrade."
            exit 1
          fi
        fi

    - name: Remove last item from previousVersions
      if: ${{ inputs.command-type == 'downgrade' }}
      run: |
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        
        if (pkg.previousVersions && pkg.previousVersions.length > 0) {
          pkg.previousVersions.pop(); // Remove last item
        }
        
        fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
        "

    - name: Save Current Version
      if: ${{ inputs.command-type != 'downgrade' }}
      run: |
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
        
        const newPkg = {};
        Object.keys(pkg).forEach(key => {
          newPkg[key] = pkg[key];
          if (key === 'version') {
            if (!pkg.previousVersions) {
              newPkg.previousVersions = [];
            } else {
              newPkg.previousVersions = pkg.previousVersions;
            }
            newPkg.previousVersions.push('${{ env.version }}');
          }
        });
        
        fs.writeFileSync('./package.json', JSON.stringify(newPkg, null, 2));
        "

    - name: Commit changes
      run: |
        git add .
        git commit -m "Update Version Package"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
